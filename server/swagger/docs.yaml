openapi: 3.1.0
info:
  title: Notifai
  description: |-
    This documentation allows one to test the different endpoints needed for managing the notifications passed through the app

    Some useful links:
    - [The Notifai repo repository](https://github.com/2022phyro/notifications)

  termsOfService: http://swagger.io/terms/
  contact:
    email: phyrokelstein2@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: '1.0'
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:3000/api/v1
  - url: https://notifai.futurdevs.tech/api/v1
tags:
  - name: app
    description: Managing the App Instance
  - name: message
    description: Managing the message objects
  - name: user
    description: Operations about user, subscribing a device, etc
  - name: api keys
    description: Gets information about the api keys

paths:
  /signup:
    post:
      tags: [app]
      summary: Sign up a new app
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/App'
      responses:
        200:
          description: App signed up successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultSuccess'
        400:
          description: Error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
  /login:
    post:
      tags: [app]
      summary: Log in an app
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginBody'
      responses:
        200:
          description: App logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultSuccess'
        400:
          description: Error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
  /logout:
    post:
      tags: [app]
      security:
        - api_key: []
      summary: Logs out an app
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogoutBody'
      responses:
        204:
          description: Logout successful
        400:
          description: Error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
  /refresh:
    post:
      tags: [app]
      summary: Refresh an app's token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshBody'
      responses:
        200:
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultSuccess'         
        400:
          description: Error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
  /app:
    get:
      tags: [app]
      security:
        - api_key: []
      summary: Get an app's details
      responses:
        200:
          description: App details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppResponse'
        400:
          description: Error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
    patch:
      tags: [app]
      security:
        - api_key: []
      summary: Update an app's details
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/App'
      responses:
        200:
          description: App updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppResponse'
        400:
          description: Error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
    delete:
      tags: [app]
      security:
        - api_key: []
      summary: Delete an app
      responses:
        204:
          description: App deleted successfully
        400:
          description: Error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
  /app/messages/{id}:
    get:
      security:
        - api_key: []
      tags: [message]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The message ID
      responses:
        200:
          description: Message details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        400:
          description: Error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
    delete:
      tags: [message]
      security:
        - api_key: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The message ID
      responses:
        204:
          description: Message deleted
        400:
          description: Error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
  
  /app/messages/{id}/read:
    patch:
      tags: [message]
      security:
        - api_key: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The message ID
      responses:
        200:
          description: Message marked as read
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        400:
          description: Error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'

  /app/messages:
    post:
      tags: [message]
      security:
        - api_key: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/FcmSchema'
      responses:
        200:
          description: Message created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        400:
          description: Error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
    get:
      tags: [message]
      security:
        - api_key: []
      parameters:
        - in: query
          name: status
          schema:
            type: string
          description: The message status
        - in: query
          name: retries
          schema:
            type: integer
          description: The number of retries
        - in: query
          name: limit
          schema:
            type: integer
          description: The number of messages to retrieve
        - in: query
          name: userId
          schema:
            type: string
          description: The user being targeted
        - in: query
          name: read
          schema:
            type: boolean
          description: If the message has been read

      responses:
        200:
          description: Message details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMessages'
        400:
          description: Error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
    delete:
      tags: [message]
      security:
        - api_key: []
      parameters:
        - in: query
          name: status
          schema:
            type: string
          description: The message status
        - in: query
          name: retries
          schema:
            type: integer
          description: The number of retries
        - in: query
          name: userId
          schema:
            type: string
          description: The user being targeted
        - in: query
          name: read
          schema:
            type: boolean
          description: If the message has been read
      responses:
        204:
          description: Message deleted
        400:
          description: Error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'

  /app/keys:
    post:
      tags: [api keys]
      security:
        - api_key: []
      summary: Create a new API key
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APIKey'
      responses:
        200:
          description: API key created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIKeyResponse'
        400:
          description: Error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
    get:
      tags: [api keys]
      security:
        - api_key: []
      summary: List all API keys
      responses:
        200:
          description: API keys retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIKeyListResponse'
        400:
          description: Error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
  /app/keys/{name}/revoke:
    post:
      tags: [api keys]
      security:
        - api_key: []
      summary: Revoke an API key
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: API key revoked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIKeyResponse'
        400:
          description: Error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
  /app/keys/{name}:
    delete:
      tags: [api keys]
      security:
        - api_key: []
      summary: Delete an API key
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: API key deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIKeyResponse'
        400:
          description: Error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
  /app/users/{userId}:
    get:
      tags: [user]
      security:
        - api_key: []
      summary: Get a user's details
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: The user ID
      responses:
        200:
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        400:
          description: Error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
    delete:
      tags: [user]
      security:
        - api_key: []
      summary: Delete a user
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: The user ID
      responses:
        204:
          description: User deleted successfully
        400:
          description: Error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
  /app/users/{userId}/unsubscribe:
    post:
      tags: [user]
      security:
        - api_key: []
      summary: Unsubscribe a user
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: The user ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscription'
      responses:
        200:
          description: User unsubscribed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultSuccess'
        400:
          description: Error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
  /app/users/{userId}/subscribe:
    post:
      tags: [user]
      security:
        - api_key: []
      summary: Subscribe a user
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: The user ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscription'
      responses:
        200:
          description: User subscribed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultSuccess'
        400:
          description: Error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'

components:
  schemas:
    App:
      type: object
      required:
        - name
        - email
        - password
        - phone
      properties:
        name:
          type: string
          description: The name of the app
          examples:
            - duplo
        email:
          type: string
          format: email
          description: The email of the app
          examples:
            - app@a.com
        password:
          type: string
          format: password
          description: The password of the app
          examples:
            - pwd123
        phone:
          type: string
          description: The phone number of the app
          examples:
            - '+123 234567890'
    AppUpdate:
      type: object
      properties:
        name:
          type: string
          description: The name of the app
          examples:
            - duplo
        email:
          type: string
          format: email
          description: The email of the app
          examples:
            - app@a.com
        password:
          type: string
          format: password
          description: The password of the app
          examples:
            - pwd123
        phone:
          type: string
          description: The phone number of the app
          examples:
            - '+123 234567890'
    
    RefreshBody:
      type: object
      required:
        - refresh
      properties:
        refresh:
          type: string
          description: The refresh token
          examples:
            - eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    LogoutBody:
      type: object
      required:
        - refresh
      properties:
        refresh:
          type: string
          description: The refresh token
          examples:
            - eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c 
        all:
          type: boolean
          description: Logout from all devices
          examples:
            - false
    LoginBody:
      type: object
      required:
        - name
        - password
      properties:
        name:
          type: string
          description: The name of the app
          examples:
            - duplo
        password:
          type: string
          format: password
          description: The password of the app
          examples: 
            - pwd123
    DefaultError:
      type: object
      required:
        - status
        - message
        - errors
        - data
      properties:
        status:
          type: number
          description: Status code
          examples:
            - 400
        message:
          type: string
          description: Error message
          examples: 
            - 'Bad Request'
        errors:
          type: object
          description: Object of error messages
          examples:
            - auth: [Invalid token]
        data:
          type: object
          description: Empty
          examples:
            - {}
        
    DefaultSuccess:
      type: object
      required:
        - status
        - message
        - errors
        - data
      properties:
        status:
          type: number
          description: Status code
          examples:
            - 200
        message:
          type: string
          description: Resposne message
          examples: 
            - 'Response Successful'
        errors:
          type: object
          description: Empty
          examples:
            - {}
        data:
          type: object
          description: Object of data returned
          examples:
            - {}
    AppResponse:
      type: object
      required:
        - status
        - message
        - errors
        - data
      properties:
        status:
          type: number
          description: Status code
          examples:
            - 200
        message:
          type: string
          description: Resposne message
          examples: 
            - 'Response Successful'
        errors:
          type: object
          description: Empty
          examples:
            - {}
        data:
          type: object
          description: The app data
          required:
            - _id
            - name
            - email
            - phone
            - created
          properties:
            _id:
              type: string
              description: The ID of the app
              examples:
                - '60d2ee9f292a3e2d8c3656f2'
            name:
              type: string
              description: The name of the app
              examples:
                - 'My App'
            email:
              type: string
              format: email
              description: The email of the app
              examples:
                - 'myapp@example.com'
            phone:
              type: string
              description: The phone number of the app
              examples:
                - '+123 234567890'
            created:
              type: string
              format: date-time
              description: The creation date of the app
              examples:
                - '2021-06-23T09:30:00Z'
    MessageResponse:
      type: object
      required:
        - status
        - message
        - errors
        - data
      properties:
        status:
          type: number
          description: Status code
          examples:
            - 200
        message:
          type: string
          description: Resposne message
          examples: 
            - 'Response Successful'
        errors:
          type: object
          description: Empty
          examples:
            - {}
        data:
          type: object
          description: The message object
          $ref: '#/components/schemas/MessageComponent' 
          required:
            - _id
            - created
            - appId
            - nType
            - userId
            - read
            - status
            - retries
          properties:
            _id:
              type: string
              description: The ID of the message
              examples:
                - '60d2ee9f292a3e2d8c3656f2'
            created:
              type: string
              format: date-time
              description: The creation date of the message
              examples:
                - '2021-06-23T09:30:00Z'
            appId:
              type: string
              description: The ID of the app the message belongs to
              examples:
                - '60d2ee9f292a3e2d8c3656f2'
            nType:
              type: string
              description: THe type of notification
              examples:
                - fcm
                - email
                - sms
            userId:
              type: string
              description: The ID of the user the message belongs to
              examples:
                - '60d2ee9f292a3e2d8c3656f2'
            read:
              type: boolean
              description: IF the message has been read
              examples:
                - false
            status:
              type: string
              description: The state of the message
              examples:
                - PENDING
            retries:
              type: number
              description: The number of times the message was resent due to errors
              examples:
                - 0 
                  
    PaginatedMessages:
        type: object
        required:
          - status
          - message
          - errors
          - data
        properties:
          status:
            type: number
            description: Status code
            examples:
              - 200
          message:
            type: string
            description: Resposne message
            examples: 
              - 'Response Successful'
          errors:
            type: object
            description: Empty
            examples:
              - {}
          data:
            type: object
            description: The message object paginated list
            required:
              - prev
              - next
              - messages
            properties:
              prev:
                type: number
                description: The previous page number
                examples:
                  - 1
              next:
                type: number
                description: The previous page number
                examples:
                  - 1
              messages:
                type: array
                description: A list of retrieved messages
                items:
                  type: object
                  description: The message object proper
                  $ref: '#/components/schemas/MessageComponent' 

    MessageComponent:
      type: object
      required:
        - _id
        - created
        - appId
        - nType
        - userId
        - read
        - status
        - retries
      properties:
        _id:
          type: string
          description: The ID of the message
          examples:
            - '60d2ee9f292a3e2d8c3656f2'
        created:
          type: string
          format: date-time
          description: The creation date of the message
          examples:
            - '2021-06-23T09:30:00Z'
        appId:
          type: string
          description: The ID of the app the message belongs to
          examples:
            - '60d2ee9f292a3e2d8c3656f2'
        nType:
          type: string
          description: THe type of notification
          examples:
            - fcm
            - email
            - sms
        userId:
          type: string
          description: The ID of the user the message belongs to
          examples:
            - '60d2ee9f292a3e2d8c3656f2'
        read:
          type: boolean
          description: IF the message has been read
          examples:
            - false
        status:
          type: string
          description: The state of the message
          examples:
            - 'PENDING'
        retries:
          type: number
          description: The number of times the message was resent due to errors
          examples:
            - 0
 
    APIKey:
      type: object
      properties:
        name:
          type: string
          description: Unique identifer for each key
          examples:
            - guhj2dbj
        created:
          type: string
          description: when the key was created
          format: date-time
          examples:
            - 2022-01-01T00:00:00Z
        expires:
          type: string
          description: when the key expires
          format: date-time
          examples:
            - 2023-01-01T00:00:00Z
        revoked:
          type: boolean
          description: The status of the key if it has been revoked or not
          examples:
            - false
        appId:
          type: string
          format: oid
          description: The app id the api key belongs to
          examples:
            - 60d2ee9f292a3e2d8c3656f2

    APIKeyResponse:
      type: object
      required:
        - status
        - message
        - errors
        - data
      properties:
        status:
          type: number
          description: Status code
          examples:
            - 200
        message:
          type: string
          description: Resposne message
          examples: 
            - 'Response Successful'
        errors:
          type: object
          description: Empty
          examples:
            - {}
        data:
          type: object
          description: The api key
          $ref: '#/components/schemas/APIKey'

    APIKeyListResponse:
      type: object
      required:
        - status
        - message
        - errors
        - data
      properties:
        status:
          type: number
          description: Status code
          examples:
            - 200
        message:
          type: string
          description: Resposne message
          examples: 
            - 'Response Successful'
        errors:
          type: object
          description: Empty
          examples:
            - {}
        data:
          type: object
          description: All the keys associated with the app
          required:
            - keys
          properties:
            keys:
              type: array
              description: All the keys of the app
              items:
                type: object
                description: The key proper
                $ref: '#/components/schemas/APIKey'

    Subscription:
      type: object
      required:
        - p256dh
        - auth
        - endpoint
      properties:
        p256dh:
          type: string
          description: The public key of the user
          examples: 
            - fddjfhbghbdkhjhdjihfjh
        auth:
          type: string
          description: The auth secret of the user
          examples:
            - dfhjgskhdfkjbvhjdghfkhgkjcbkjcfgf
        endpoint:
          type: string
          format: url
          description: The unique endpoint generated for each device
          examples:
            - https://example.com/p39704798475495490
    UserResponse:
      type: object
      required:
        - status
        - message
        - errors
        - data
      properties:
        status:
          type: number
          description: Status code
          examples:
            - 200
        message:
          type: string
          description: Resposne message
          examples: 
            - 'Response Successful'
        errors:
          type: object
          description: Empty
          examples:
            - {}
        data:
          type: object
          description: The api key
          required: 
            - _id
            - dbId
            - deviceCount
          properties:
            _id:
              type: string
              description: The ID of the app
              examples:
                - '60d2ee9f292a3e2d8c3656f2'
            dbId:
              type: string
              description: The id by which the user is identified in the app's own database
              examples:
                - 'abcdacebde12beb44ebe'
            deviceCount:
              type: number
              description: The number of devices the users has subscribed to the service
              examples:
                - 3
    FcmSchema:
      type: object
      required:
        - payload
        - notification
      properties:
        payload:
          type: object
          properties:
            appId:
              type: string
            userId:
              type: string
        notification:
          type: object
          required:
            - title
            - body
          properties:
            name:
              type: string
            data:
              type: object
            title:
              type: string
            body:
              type: string
            icon:
              type: string
            clickUrl:
              type: string
            badge:
              type: integer
  securitySchemes:
    api_key:
      type: apiKey
      name: Authorization
      in: header